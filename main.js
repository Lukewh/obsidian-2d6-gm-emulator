/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var gm_emulator_exports = {};
__export(gm_emulator_exports, {
  LikelihoodModal: () => LikelihoodModal,
  default: () => GMEmulator
});
module.exports = __toCommonJS(gm_emulator_exports);
var import_obsidian = require("obsidian");

// oracle/common.ts
var LIKELIHOOD = /* @__PURE__ */ ((LIKELIHOOD2) => {
  LIKELIHOOD2["IMPOSSIBLE"] = "1. Impossible";
  LIKELIHOOD2["VERY_UNLIKELY"] = "2. Very unlikely";
  LIKELIHOOD2["UNLIKELY"] = "3. Unlikely";
  LIKELIHOOD2["FIFTY_FIFTY"] = "4. Fifty/Fifty";
  LIKELIHOOD2["LIKELY"] = "5. Likely";
  LIKELIHOOD2["VERY_LIKELY"] = "6. Very likely";
  LIKELIHOOD2["A_SURE_THING"] = "7. A sure thing";
  return LIKELIHOOD2;
})(LIKELIHOOD || {});
var roll = (mod = 0) => {
  const modifier = typeof mod === "number" ? mod : 0;
  let rolled = Math.floor(Math.random() * 100);
  rolled += modifier;
  if (rolled < 0) {
    rolled = 0;
  }
  if (rolled > 99) {
    rolled = 99;
  }
  return rolled;
};
var question = (likelihood, fn) => {
  likelihood = likelihood || "50/50";
  switch (likelihood.toLowerCase()) {
    case "impossible":
      return fn(-40);
    case "very unlikely":
      return fn(-20);
    case "unlikely":
      return fn(-10);
    case "likely":
      return fn(10);
    case "very likely":
      return fn(20);
    case "a sure thing":
      return fn(40);
    default:
      return fn(0);
  }
};

// oracle/yesNo.ts
var yesNo = (_modifier) => {
  let rolled = roll(_modifier);
  if (rolled < 10) {
    return "Definitely not" /* DEFINITELY_NOT */;
  }
  if (rolled >= 10 && rolled < 50) {
    return "No" /* NO */;
  }
  if (rolled >= 50 && rolled < 90) {
    return "Yes" /* YES */;
  }
  return "Definitely yes" /* DEFINITELY_YES */;
};

// oracle/encounter.ts
var encounter = (_modifier) => {
  let hasEncounter = yesNo(_modifier);
  if (!hasEncounter.toLowerCase().contains("yes")) {
    return "None - Nothing happens" /* NONE */;
  }
  const rolled = roll();
  if (rolled < 10) {
    return "Request - You are requested to do something. A side quest or deliver an item or information" /* REQUEST */;
  }
  if (rolled < 20) {
    return "Inconsequential - Something happens that doesn't effect your goal" /* INCONSEQUENTIAL */;
  }
  if (rolled < 30) {
    return "Informative - You learn a piece of information that helps you achieve your goal" /* INFORMATIVE */;
  }
  if (rolled < 40) {
    return "Disruptive - Something happens that delays or disrupts you in some way" /* DISRUPTIVE */;
  }
  if (rolled < 50) {
    return "Deceptive - You are deceived through false information, or to temporarily travel a different path" /* DECEPTIVE */;
  }
  if (rolled < 60) {
    return "Defensive - You happen upon a defensive situation. Perhaps someone is being guarded towards you, or the enemy has erected a blockade" /* DEFENSIVE */;
  }
  if (rolled < 70) {
    return "Request - You are requested to do something. A side quest or deliver an item or information" /* REQUEST */;
  }
  if (rolled < 80) {
    return "Informative - You learn a piece of information that helps you achieve your goal" /* INFORMATIVE */;
  }
  if (rolled < 90) {
    return "Inconsequential - Something happens that doesn't effect your goal" /* INCONSEQUENTIAL */;
  }
  return "Aggressive - Someone doesn't like the cut of your jib, or an altercation starts" /* AGGRESSIVE */;
};

// index.ts
var LikelihoodModal = class extends import_obsidian.SuggestModal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.contentEl.createEl("h1", { text: "What's the likelihood?" });
  }
  getSuggestions(query) {
    return Object.values(LIKELIHOOD).filter(
      (item) => item.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  onChooseSuggestion(item, evt) {
    this.onSubmit(item);
  }
};
var GMEmulator = class extends import_obsidian.Plugin {
  writeResult(editor, fn, result) {
    const res = question(result, fn);
    new import_obsidian.Notice(`Answer: ${res}`);
    const cursor = editor.getCursor();
    const resultWithEmphasis = `**${res}**`;
    editor.replaceRange(resultWithEmphasis, cursor);
    editor.setCursor(cursor.line, cursor.ch + resultWithEmphasis.length);
  }
  async onload() {
    console.log("loading plugin");
    this.addCommand({
      id: "gm-oracle-yes-no",
      name: "Oracle: Yes/No",
      editorCallback: (editor) => {
        new LikelihoodModal(this.app, (result) => {
          this.writeResult(editor, yesNo, result);
        }).open();
      }
    });
    this.addCommand({
      id: "gm-oracle-encounter",
      name: "Oracle: Encounter",
      editorCallback: (editor) => {
        new LikelihoodModal(this.app, (result) => {
          this.writeResult(editor, encounter, result);
        }).open();
      }
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
};
