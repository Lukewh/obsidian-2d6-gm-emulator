/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var gm_emulator_exports = {};
__export(gm_emulator_exports, {
  LikelihoodModal: () => LikelihoodModal,
  default: () => GMEmulator
});
module.exports = __toCommonJS(gm_emulator_exports);
var import_obsidian = require("obsidian");

// oracle/common.ts
var LIKELIHOOD = /* @__PURE__ */ ((LIKELIHOOD2) => {
  LIKELIHOOD2["IMPOSSIBLE"] = "1. Impossible";
  LIKELIHOOD2["VERY_UNLIKELY"] = "2. Very unlikely";
  LIKELIHOOD2["UNLIKELY"] = "3. Unlikely";
  LIKELIHOOD2["FIFTY_FIFTY"] = "4. Fifty/Fifty";
  LIKELIHOOD2["LIKELY"] = "5. Likely";
  LIKELIHOOD2["VERY_LIKELY"] = "6. Very likely";
  LIKELIHOOD2["A_SURE_THING"] = "7. A sure thing";
  return LIKELIHOOD2;
})(LIKELIHOOD || {});
var roll = (mod = 0) => {
  const modifier = typeof mod === "number" ? mod : 0;
  let rolled = Math.floor(Math.random() * 100);
  rolled += modifier;
  if (rolled < 0) {
    rolled = 0;
  }
  if (rolled > 99) {
    rolled = 99;
  }
  return rolled;
};
var question = (likelihood, fn) => {
  likelihood = likelihood || "50/50";
  switch (likelihood.toLowerCase()) {
    case "impossible":
      return fn(-40);
    case "very unlikely":
      return fn(-20);
    case "unlikely":
      return fn(-10);
    case "likely":
      return fn(10);
    case "very likely":
      return fn(20);
    case "a sure thing":
      return fn(40);
    default:
      return fn(0);
  }
};

// oracle/yesNo.ts
var yesNo = (_modifier) => {
  let rolled = roll(_modifier);
  if (rolled < 10) {
    return "Definitely not" /* DEFINITELY_NOT */;
  }
  if (rolled >= 10 && rolled < 50) {
    return "No" /* NO */;
  }
  if (rolled >= 50 && rolled < 90) {
    return "Yes" /* YES */;
  }
  return "Definitely yes" /* DEFINITELY_YES */;
};

// oracle/encounter.ts
var encounter = (_modifier) => {
  let hasEncounter = yesNo(_modifier);
  if (!hasEncounter.toLowerCase().contains("yes")) {
    return "None - Nothing happens" /* NONE */;
  }
  const rolled = roll();
  if (rolled < 10) {
    return "Request - You are requested to do something. A side quest or deliver an item or information" /* REQUEST */;
  }
  if (rolled < 20) {
    return "Inconsequential - Something happens that doesn't effect your goal" /* INCONSEQUENTIAL */;
  }
  if (rolled < 30) {
    return "Informative - You learn a piece of information that helps you achieve your goal" /* INFORMATIVE */;
  }
  if (rolled < 40) {
    return "Disruptive - Something happens that delays or disrupts you in some way" /* DISRUPTIVE */;
  }
  if (rolled < 50) {
    return "Deceptive - You are deceived through false information, or to temporarily travel a different path" /* DECEPTIVE */;
  }
  if (rolled < 60) {
    return "Defensive - You happen upon a defensive situation. Perhaps someone is being guarded towards you, or the enemy has erected a blockade" /* DEFENSIVE */;
  }
  if (rolled < 70) {
    return "Request - You are requested to do something. A side quest or deliver an item or information" /* REQUEST */;
  }
  if (rolled < 80) {
    return "Informative - You learn a piece of information that helps you achieve your goal" /* INFORMATIVE */;
  }
  if (rolled < 90) {
    return "Inconsequential - Something happens that doesn't effect your goal" /* INCONSEQUENTIAL */;
  }
  return "Aggressive - Someone doesn't like the cut of your jib, or an altercation starts" /* AGGRESSIVE */;
};

// index.ts
var LikelihoodModal = class extends import_obsidian.SuggestModal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.contentEl.createEl("h1", { text: "What's the likelihood?" });
  }
  getSuggestions(query) {
    return Object.values(LIKELIHOOD).filter(
      (item) => item.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(item, el) {
    el.createEl("div", { text: item });
  }
  onChooseSuggestion(item, evt) {
    this.onSubmit(item);
  }
};
var GMEmulator = class extends import_obsidian.Plugin {
  writeResult(editor, fn, result) {
    const res = question(result, fn);
    new import_obsidian.Notice(`Answer: ${res}`);
    const cursor = editor.getCursor();
    const resultWithEmphasis = `**${res}**`;
    editor.replaceRange(resultWithEmphasis, cursor);
    editor.setCursor(cursor.line, cursor.ch + resultWithEmphasis.length);
  }
  async onload() {
    console.log("loading plugin");
    this.addCommand({
      id: "gm-oracle-yes-no",
      name: "Oracle: Yes/No",
      editorCallback: (editor) => {
        new LikelihoodModal(this.app, (result) => {
          this.writeResult(editor, yesNo, result);
        }).open();
      }
    });
    this.addCommand({
      id: "gm-oracle-encounter",
      name: "Oracle: Encounter",
      editorCallback: (editor) => {
        new LikelihoodModal(this.app, (result) => {
          this.writeResult(editor, encounter, result);
        }).open();
      }
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiaW5kZXgudHMiLCAib3JhY2xlL2NvbW1vbi50cyIsICJvcmFjbGUveWVzTm8udHMiLCAib3JhY2xlL2VuY291bnRlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFN1Z2dlc3RNb2RhbCwgTm90aWNlLCBFZGl0b3IgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuaW1wb3J0IHsgTElLRUxJSE9PRCwgcXVlc3Rpb24sIFJldHVyblN0cmluZyB9IGZyb20gXCIuL29yYWNsZS9jb21tb25cIjtcbmltcG9ydCB7IHllc05vIH0gZnJvbSBcIi4vb3JhY2xlL3llc05vXCI7XG5pbXBvcnQgeyBlbmNvdW50ZXIgfSBmcm9tIFwiLi9vcmFjbGUvZW5jb3VudGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBMaWtlbGlob29kTW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8c3RyaW5nPiB7XG4gIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIG9uU3VibWl0OiAocmVzdWx0OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICBzdXBlcihhcHApO1xuICAgIHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcbiAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJXaGF0J3MgdGhlIGxpa2VsaWhvb2Q/XCIgfSk7XG4gIH1cblxuICBnZXRTdWdnZXN0aW9ucyhxdWVyeTogc3RyaW5nKTogU3RyaW5nW10ge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKExJS0VMSUhPT0QpLmZpbHRlcigoaXRlbSkgPT5cbiAgICAgIGl0ZW0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKVxuICAgICk7XG4gIH1cblxuICByZW5kZXJTdWdnZXN0aW9uKGl0ZW06IHN0cmluZywgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgZWwuY3JlYXRlRWwoXCJkaXZcIiwgeyB0ZXh0OiBpdGVtIH0pO1xuICB9XG5cbiAgb25DaG9vc2VTdWdnZXN0aW9uKGl0ZW06IHN0cmluZywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIHRoaXMub25TdWJtaXQoaXRlbSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR01FbXVsYXRvciBleHRlbmRzIFBsdWdpbiB7XG4gIHdyaXRlUmVzdWx0KFxuICAgIGVkaXRvcjogRWRpdG9yLFxuICAgIGZuOiAobW9kOiBudW1iZXIpID0+IFJldHVyblN0cmluZyxcbiAgICByZXN1bHQ6IHN0cmluZ1xuICApIHtcbiAgICBjb25zdCByZXMgPSBxdWVzdGlvbihyZXN1bHQgYXMgTElLRUxJSE9PRCwgZm4pO1xuICAgIG5ldyBOb3RpY2UoYEFuc3dlcjogJHtyZXN9YCk7XG4gICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGNvbnN0IHJlc3VsdFdpdGhFbXBoYXNpcyA9IGAqKiR7cmVzfSoqYDtcbiAgICBlZGl0b3IucmVwbGFjZVJhbmdlKHJlc3VsdFdpdGhFbXBoYXNpcywgY3Vyc29yKTtcbiAgICBlZGl0b3Iuc2V0Q3Vyc29yKGN1cnNvci5saW5lLCBjdXJzb3IuY2ggKyByZXN1bHRXaXRoRW1waGFzaXMubGVuZ3RoKTtcbiAgfVxuXG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgcGx1Z2luXCIpO1xuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogXCJnbS1vcmFjbGUteWVzLW5vXCIsXG4gICAgICBuYW1lOiBcIk9yYWNsZTogWWVzL05vXCIsXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB7XG4gICAgICAgIG5ldyBMaWtlbGlob29kTW9kYWwodGhpcy5hcHAsIChyZXN1bHQpID0+IHtcbiAgICAgICAgICB0aGlzLndyaXRlUmVzdWx0KGVkaXRvciwgeWVzTm8sIHJlc3VsdCk7XG4gICAgICAgIH0pLm9wZW4oKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwiZ20tb3JhY2xlLWVuY291bnRlclwiLFxuICAgICAgbmFtZTogXCJPcmFjbGU6IEVuY291bnRlclwiLFxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xuICAgICAgICBuZXcgTGlrZWxpaG9vZE1vZGFsKHRoaXMuYXBwLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgdGhpcy53cml0ZVJlc3VsdChlZGl0b3IsIGVuY291bnRlciwgcmVzdWx0KTtcbiAgICAgICAgfSkub3BlbigpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICAgIGNvbnNvbGUubG9nKFwidW5sb2FkaW5nIHBsdWdpblwiKTtcbiAgfVxufVxuIiwgImV4cG9ydCBlbnVtIExJS0VMSUhPT0Qge1xuICBJTVBPU1NJQkxFID0gXCIxLiBJbXBvc3NpYmxlXCIsXG4gIFZFUllfVU5MSUtFTFkgPSBcIjIuIFZlcnkgdW5saWtlbHlcIixcbiAgVU5MSUtFTFkgPSBcIjMuIFVubGlrZWx5XCIsXG4gIEZJRlRZX0ZJRlRZID0gXCI0LiBGaWZ0eS9GaWZ0eVwiLFxuICBMSUtFTFkgPSBcIjUuIExpa2VseVwiLFxuICBWRVJZX0xJS0VMWSA9IFwiNi4gVmVyeSBsaWtlbHlcIixcbiAgQV9TVVJFX1RISU5HID0gXCI3LiBBIHN1cmUgdGhpbmdcIixcbn1cblxuZXhwb3J0IGVudW0gWUVTX05PIHtcbiAgREVGSU5JVEVMWV9OT1QgPSBcIkRlZmluaXRlbHkgbm90XCIsXG4gIE5PID0gXCJOb1wiLFxuICBZRVMgPSBcIlllc1wiLFxuICBERUZJTklURUxZX1lFUyA9IFwiRGVmaW5pdGVseSB5ZXNcIixcbn1cblxuZXhwb3J0IGVudW0gRU5DT1VOVEVSIHtcbiAgTk9ORSA9IFwiTm9uZSAtIE5vdGhpbmcgaGFwcGVuc1wiLFxuICBSRVFVRVNUID0gXCJSZXF1ZXN0IC0gWW91IGFyZSByZXF1ZXN0ZWQgdG8gZG8gc29tZXRoaW5nLiBBIHNpZGUgcXVlc3Qgb3IgZGVsaXZlciBhbiBpdGVtIG9yIGluZm9ybWF0aW9uXCIsXG4gIElOQ09OU0VRVUVOVElBTCA9IFwiSW5jb25zZXF1ZW50aWFsIC0gU29tZXRoaW5nIGhhcHBlbnMgdGhhdCBkb2Vzbid0IGVmZmVjdCB5b3VyIGdvYWxcIixcbiAgSU5GT1JNQVRJVkUgPSBcIkluZm9ybWF0aXZlIC0gWW91IGxlYXJuIGEgcGllY2Ugb2YgaW5mb3JtYXRpb24gdGhhdCBoZWxwcyB5b3UgYWNoaWV2ZSB5b3VyIGdvYWxcIixcbiAgRElTUlVQVElWRSA9IFwiRGlzcnVwdGl2ZSAtIFNvbWV0aGluZyBoYXBwZW5zIHRoYXQgZGVsYXlzIG9yIGRpc3J1cHRzIHlvdSBpbiBzb21lIHdheVwiLFxuICBERUNFUFRJVkUgPSBcIkRlY2VwdGl2ZSAtIFlvdSBhcmUgZGVjZWl2ZWQgdGhyb3VnaCBmYWxzZSBpbmZvcm1hdGlvbiwgb3IgdG8gdGVtcG9yYXJpbHkgdHJhdmVsIGEgZGlmZmVyZW50IHBhdGhcIixcbiAgREVGRU5TSVZFID0gXCJEZWZlbnNpdmUgLSBZb3UgaGFwcGVuIHVwb24gYSBkZWZlbnNpdmUgc2l0dWF0aW9uLiBQZXJoYXBzIHNvbWVvbmUgaXMgYmVpbmcgZ3VhcmRlZCB0b3dhcmRzIHlvdSwgb3IgdGhlIGVuZW15IGhhcyBlcmVjdGVkIGEgYmxvY2thZGVcIixcbiAgQUdHUkVTU0lWRSA9IFwiQWdncmVzc2l2ZSAtIFNvbWVvbmUgZG9lc24ndCBsaWtlIHRoZSBjdXQgb2YgeW91ciBqaWIsIG9yIGFuIGFsdGVyY2F0aW9uIHN0YXJ0c1wiLFxufVxuXG5leHBvcnQgdHlwZSBSZXR1cm5TdHJpbmcgPSBZRVNfTk8gfCBFTkNPVU5URVI7XG5cbmV4cG9ydCBjb25zdCByb2xsID0gKG1vZCA9IDApOiBudW1iZXIgPT4ge1xuICBjb25zdCBtb2RpZmllciA9IHR5cGVvZiBtb2QgPT09IFwibnVtYmVyXCIgPyBtb2QgOiAwO1xuICBsZXQgcm9sbGVkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKTtcbiAgcm9sbGVkICs9IG1vZGlmaWVyO1xuICBpZiAocm9sbGVkIDwgMCkge1xuICAgIHJvbGxlZCA9IDA7XG4gIH1cbiAgaWYgKHJvbGxlZCA+IDk5KSB7XG4gICAgcm9sbGVkID0gOTk7XG4gIH1cbiAgcmV0dXJuIHJvbGxlZDtcbn07XG5cbmV4cG9ydCBjb25zdCBxdWVzdGlvbiA9IChcbiAgbGlrZWxpaG9vZDogTElLRUxJSE9PRCxcbiAgZm46IChtb2Q6IG51bWJlcikgPT4gUmV0dXJuU3RyaW5nXG4pOiBSZXR1cm5TdHJpbmcgPT4ge1xuICBsaWtlbGlob29kID0gbGlrZWxpaG9vZCB8fCBcIjUwLzUwXCI7XG4gIHN3aXRjaCAobGlrZWxpaG9vZC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSBcImltcG9zc2libGVcIjpcbiAgICAgIHJldHVybiBmbigtNDApO1xuICAgIGNhc2UgXCJ2ZXJ5IHVubGlrZWx5XCI6XG4gICAgICByZXR1cm4gZm4oLTIwKTtcbiAgICBjYXNlIFwidW5saWtlbHlcIjpcbiAgICAgIHJldHVybiBmbigtMTApO1xuICAgIGNhc2UgXCJsaWtlbHlcIjpcbiAgICAgIHJldHVybiBmbigxMCk7XG4gICAgY2FzZSBcInZlcnkgbGlrZWx5XCI6XG4gICAgICByZXR1cm4gZm4oMjApO1xuICAgIGNhc2UgXCJhIHN1cmUgdGhpbmdcIjpcbiAgICAgIHJldHVybiBmbig0MCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmbigwKTtcbiAgfVxufTtcbiIsICJpbXBvcnQgeyBZRVNfTk8sIHJvbGwgfSBmcm9tIFwiLi9jb21tb25cIjtcblxuZXhwb3J0IGNvbnN0IHllc05vID0gKF9tb2RpZmllcjogbnVtYmVyKTogWUVTX05PID0+IHtcbiAgbGV0IHJvbGxlZCA9IHJvbGwoX21vZGlmaWVyKTtcblxuICBpZiAocm9sbGVkIDwgMTApIHtcbiAgICByZXR1cm4gWUVTX05PLkRFRklOSVRFTFlfTk9UO1xuICB9XG4gIGlmIChyb2xsZWQgPj0gMTAgJiYgcm9sbGVkIDwgNTApIHtcbiAgICByZXR1cm4gWUVTX05PLk5PO1xuICB9XG4gIGlmIChyb2xsZWQgPj0gNTAgJiYgcm9sbGVkIDwgOTApIHtcbiAgICByZXR1cm4gWUVTX05PLllFUztcbiAgfVxuXG4gIHJldHVybiBZRVNfTk8uREVGSU5JVEVMWV9ZRVM7XG59O1xuIiwgImltcG9ydCB7IEVOQ09VTlRFUiwgcm9sbCB9IGZyb20gXCIuL2NvbW1vblwiO1xuaW1wb3J0IHsgeWVzTm8gfSBmcm9tIFwiLi95ZXNOb1wiO1xuXG5leHBvcnQgY29uc3QgZW5jb3VudGVyID0gKF9tb2RpZmllcjogbnVtYmVyKTogRU5DT1VOVEVSID0+IHtcbiAgbGV0IGhhc0VuY291bnRlciA9IHllc05vKF9tb2RpZmllcik7XG5cbiAgaWYgKCFoYXNFbmNvdW50ZXIudG9Mb3dlckNhc2UoKS5jb250YWlucyhcInllc1wiKSkge1xuICAgIHJldHVybiBFTkNPVU5URVIuTk9ORTtcbiAgfVxuXG4gIGNvbnN0IHJvbGxlZCA9IHJvbGwoKTtcblxuICBpZiAocm9sbGVkIDwgMTApIHtcbiAgICByZXR1cm4gRU5DT1VOVEVSLlJFUVVFU1Q7XG4gIH1cbiAgaWYgKHJvbGxlZCA8IDIwKSB7XG4gICAgcmV0dXJuIEVOQ09VTlRFUi5JTkNPTlNFUVVFTlRJQUw7XG4gIH1cbiAgaWYgKHJvbGxlZCA8IDMwKSB7XG4gICAgcmV0dXJuIEVOQ09VTlRFUi5JTkZPUk1BVElWRTtcbiAgfVxuICBpZiAocm9sbGVkIDwgNDApIHtcbiAgICByZXR1cm4gRU5DT1VOVEVSLkRJU1JVUFRJVkU7XG4gIH1cbiAgaWYgKHJvbGxlZCA8IDUwKSB7XG4gICAgcmV0dXJuIEVOQ09VTlRFUi5ERUNFUFRJVkU7XG4gIH1cbiAgaWYgKHJvbGxlZCA8IDYwKSB7XG4gICAgcmV0dXJuIEVOQ09VTlRFUi5ERUZFTlNJVkU7XG4gIH1cbiAgaWYgKHJvbGxlZCA8IDcwKSB7XG4gICAgcmV0dXJuIEVOQ09VTlRFUi5SRVFVRVNUO1xuICB9XG4gIGlmIChyb2xsZWQgPCA4MCkge1xuICAgIHJldHVybiBFTkNPVU5URVIuSU5GT1JNQVRJVkU7XG4gIH1cbiAgaWYgKHJvbGxlZCA8IDkwKSB7XG4gICAgcmV0dXJuIEVOQ09VTlRFUi5JTkNPTlNFUVVFTlRJQUw7XG4gIH1cbiAgcmV0dXJuIEVOQ09VTlRFUi5BR0dSRVNTSVZFO1xufTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUEwRDs7O0FDQW5ELElBQUssYUFBTCxrQkFBS0EsZ0JBQUw7QUFDTCxFQUFBQSxZQUFBLGdCQUFhO0FBQ2IsRUFBQUEsWUFBQSxtQkFBZ0I7QUFDaEIsRUFBQUEsWUFBQSxjQUFXO0FBQ1gsRUFBQUEsWUFBQSxpQkFBYztBQUNkLEVBQUFBLFlBQUEsWUFBUztBQUNULEVBQUFBLFlBQUEsaUJBQWM7QUFDZCxFQUFBQSxZQUFBLGtCQUFlO0FBUEwsU0FBQUE7QUFBQSxHQUFBO0FBOEJMLElBQU0sT0FBTyxDQUFDLE1BQU0sTUFBYztBQUN2QyxRQUFNLFdBQVcsT0FBTyxRQUFRLFdBQVcsTUFBTTtBQUNqRCxNQUFJLFNBQVMsS0FBSyxNQUFNLEtBQUssT0FBTyxJQUFJLEdBQUc7QUFDM0MsWUFBVTtBQUNWLE1BQUksU0FBUyxHQUFHO0FBQ2QsYUFBUztBQUFBLEVBQ1g7QUFDQSxNQUFJLFNBQVMsSUFBSTtBQUNmLGFBQVM7QUFBQSxFQUNYO0FBQ0EsU0FBTztBQUNUO0FBRU8sSUFBTSxXQUFXLENBQ3RCLFlBQ0EsT0FDaUI7QUFDakIsZUFBYSxjQUFjO0FBQzNCLFVBQVEsV0FBVyxZQUFZLEdBQUc7QUFBQSxJQUNoQyxLQUFLO0FBQ0gsYUFBTyxHQUFHLEdBQUc7QUFBQSxJQUNmLEtBQUs7QUFDSCxhQUFPLEdBQUcsR0FBRztBQUFBLElBQ2YsS0FBSztBQUNILGFBQU8sR0FBRyxHQUFHO0FBQUEsSUFDZixLQUFLO0FBQ0gsYUFBTyxHQUFHLEVBQUU7QUFBQSxJQUNkLEtBQUs7QUFDSCxhQUFPLEdBQUcsRUFBRTtBQUFBLElBQ2QsS0FBSztBQUNILGFBQU8sR0FBRyxFQUFFO0FBQUEsSUFDZDtBQUNFLGFBQU8sR0FBRyxDQUFDO0FBQUEsRUFDZjtBQUNGOzs7QUM5RE8sSUFBTSxRQUFRLENBQUMsY0FBOEI7QUFDbEQsTUFBSSxTQUFTLEtBQUssU0FBUztBQUUzQixNQUFJLFNBQVMsSUFBSTtBQUNmO0FBQUEsRUFDRjtBQUNBLE1BQUksVUFBVSxNQUFNLFNBQVMsSUFBSTtBQUMvQjtBQUFBLEVBQ0Y7QUFDQSxNQUFJLFVBQVUsTUFBTSxTQUFTLElBQUk7QUFDL0I7QUFBQSxFQUNGO0FBRUE7QUFDRjs7O0FDYk8sSUFBTSxZQUFZLENBQUMsY0FBaUM7QUFDekQsTUFBSSxlQUFlLE1BQU0sU0FBUztBQUVsQyxNQUFJLENBQUMsYUFBYSxZQUFZLEVBQUUsU0FBUyxLQUFLLEdBQUc7QUFDL0M7QUFBQSxFQUNGO0FBRUEsUUFBTSxTQUFTLEtBQUs7QUFFcEIsTUFBSSxTQUFTLElBQUk7QUFDZjtBQUFBLEVBQ0Y7QUFDQSxNQUFJLFNBQVMsSUFBSTtBQUNmO0FBQUEsRUFDRjtBQUNBLE1BQUksU0FBUyxJQUFJO0FBQ2Y7QUFBQSxFQUNGO0FBQ0EsTUFBSSxTQUFTLElBQUk7QUFDZjtBQUFBLEVBQ0Y7QUFDQSxNQUFJLFNBQVMsSUFBSTtBQUNmO0FBQUEsRUFDRjtBQUNBLE1BQUksU0FBUyxJQUFJO0FBQ2Y7QUFBQSxFQUNGO0FBQ0EsTUFBSSxTQUFTLElBQUk7QUFDZjtBQUFBLEVBQ0Y7QUFDQSxNQUFJLFNBQVMsSUFBSTtBQUNmO0FBQUEsRUFDRjtBQUNBLE1BQUksU0FBUyxJQUFJO0FBQ2Y7QUFBQSxFQUNGO0FBQ0E7QUFDRjs7O0FIbENPLElBQU0sa0JBQU4sY0FBOEIsNkJBQXFCO0FBQUEsRUFHeEQsWUFBWSxLQUFVLFVBQW9DO0FBQ3hELFVBQU0sR0FBRztBQUNULFNBQUssV0FBVztBQUNoQixTQUFLLFVBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUFBLEVBQ2xFO0FBQUEsRUFFQSxlQUFlLE9BQXlCO0FBQ3RDLFdBQU8sT0FBTyxPQUFPLFVBQVUsRUFBRTtBQUFBLE1BQU8sQ0FBQyxTQUN2QyxLQUFLLFlBQVksRUFBRSxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQUEsSUFDakQ7QUFBQSxFQUNGO0FBQUEsRUFFQSxpQkFBaUIsTUFBYyxJQUF1QjtBQUNwRCxPQUFHLFNBQVMsT0FBTyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQUEsRUFDbkM7QUFBQSxFQUVBLG1CQUFtQixNQUFjLEtBQXVDO0FBQ3RFLFNBQUssU0FBUyxJQUFJO0FBQUEsRUFDcEI7QUFDRjtBQUVBLElBQXFCLGFBQXJCLGNBQXdDLHVCQUFPO0FBQUEsRUFDN0MsWUFDRSxRQUNBLElBQ0EsUUFDQTtBQUNBLFVBQU0sTUFBTSxTQUFTLFFBQXNCLEVBQUU7QUFDN0MsUUFBSSx1QkFBTyxXQUFXLEdBQUcsRUFBRTtBQUMzQixVQUFNLFNBQVMsT0FBTyxVQUFVO0FBQ2hDLFVBQU0scUJBQXFCLEtBQUssR0FBRztBQUNuQyxXQUFPLGFBQWEsb0JBQW9CLE1BQU07QUFDOUMsV0FBTyxVQUFVLE9BQU8sTUFBTSxPQUFPLEtBQUssbUJBQW1CLE1BQU07QUFBQSxFQUNyRTtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2IsWUFBUSxJQUFJLGdCQUFnQjtBQUM1QixTQUFLLFdBQVc7QUFBQSxNQUNkLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLGdCQUFnQixDQUFDLFdBQW1CO0FBQ2xDLFlBQUksZ0JBQWdCLEtBQUssS0FBSyxDQUFDLFdBQVc7QUFDeEMsZUFBSyxZQUFZLFFBQVEsT0FBTyxNQUFNO0FBQUEsUUFDeEMsQ0FBQyxFQUFFLEtBQUs7QUFBQSxNQUNWO0FBQUEsSUFDRixDQUFDO0FBRUQsU0FBSyxXQUFXO0FBQUEsTUFDZCxJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixnQkFBZ0IsQ0FBQyxXQUFtQjtBQUNsQyxZQUFJLGdCQUFnQixLQUFLLEtBQUssQ0FBQyxXQUFXO0FBQ3hDLGVBQUssWUFBWSxRQUFRLFdBQVcsTUFBTTtBQUFBLFFBQzVDLENBQUMsRUFBRSxLQUFLO0FBQUEsTUFDVjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLFdBQVc7QUFDVCxZQUFRLElBQUksa0JBQWtCO0FBQUEsRUFDaEM7QUFDRjsiLAogICJuYW1lcyI6IFsiTElLRUxJSE9PRCJdCn0K
